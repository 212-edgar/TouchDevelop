meta version "v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex";
meta name "flashing heart tutorial";
meta rootId "xJRCBH3YIz4bMjLLSt5QrX5U";
meta hasIds "yes";
meta platform "current";
meta parentIds "";
// control images with variables. #microbit #docs #tutorials #stepByStep
#xkPpDa5IUqmg0Bd4
action \u00230_main() {
  #xMZvXjdlMZuY7Gh2 // {box:avatar:avatar}
  #TXbKj0n88SBT3ZHf // Let's begin by creating a **forever** loop so that the heart can continuously flash.
  #CBojua4OheEvSsyS // {stcode}
  #ZV0rfKH4IuiF3zOj // {/box}
  #iZkyEfHTeHpYToEd basic[lib micro\u003abit] →forever;
  #hb1ScsYK7CtQY9OP where `implicit` \_body\_() {
    #EzH5zRoLqL44TUmF // {box:avatar:avatar}
    #jyAdrhhmtT4QzZZo // Now let's plot and display a heart image on the BBC micro:bit.
    #xTUlIt18NLalsjIr // {stcode}
    #K4vgzySzJftYLZpC // {/box}
    #y4ytMLcGIthzjN1o basic[lib micro\u003abit] →show_leds("0 1 0 1 0\n1 1 1 1 1\n1 1 1 1 1\n0 1 1 1 0\n0 0 1 0 0", 400);
    #at2Say7Gx8U2BYGv // {stcmd:run}
    #MlJGHtZzGZjhJihV // {box:avatar:avatar}
    #xP8t2A5p1B2evsLe // We need to pause for a little bit before clearing the screen or else the heart disappears immediately.
    #yKM2h4ak62gaL9pC // {stcode}
    #ZmWcEfydvWI4hGyG // {/box}
    #zXZvzZp0XgYYaFrD basic[lib micro\u003abit] →pause(500);
    #XUfrbYD8sr3fKWw1 // {box:avatar:avatar}
    #qco45OxAC5HxnC4v // Now we can clear the screen.
    #h2ebe2tRVqF4neZS // {stcode}
    #bObnG5tr7OOOOatS // {/box}
    #x5Ki4UC3eCnl7l2C basic[lib micro\u003abit] →clear_screen;
    #IDViNSdGTOnRj9j7 // {box:avatar:avatar}
    #z3WVR7UxQH8jY1TK // Again, we need to pause, this time before showing the image again.
    #LN2StgzgB42hq3kR // {stcode}
    #TCEAlSxTntoHyJEP // {/box}
    #bg0wqIA3xh2krx02 basic[lib micro\u003abit] →pause(500);
  }
  #sL2YLOSW5pT00Ai6 // {stcmd:compile}
}
#T6l6bj8oRmkmUB2v meta import micro\u003abit {
  pub "xhvlgz"
  usage {
    type Image
    action `sync` \_libinit()
    action `async` pause(ms: Number)
    action `sync` clear_screen()
    action `sync` width(@this: ♻ micro\u003abit → Image) returns(w: Number)
    action `async` scroll_image(@this: ♻ micro\u003abit → Image, x_offset_per_step: Number, interval: Number)
    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)
    action `sync` plot(x: Number, y: Number)
    action `sync` point(x: Number, y: Number) returns(on: Boolean)
    action `async` show_string(text: String, interval: Number)
    action `sync` unplot(x: Number, y: Number)
    action `sync` on_button_pressed(name: String, body: Action)
    action `async` show_image(@this: ♻ micro\u003abit → Image, x_offset: Number)
    action `sync` compass_heading() returns(degrees: Number)
    action `sync` acceleration(dimension: String) returns(millig: Number)
    action `sync` digital_write_pin(name: String, value: Number)
    action `sync` digital_read_pin(name: String) returns(value: Number)
    action `sync` analog_read_pin(name: String) returns(value: Number)
    action `sync` analog_write_pin(name: String, value: Number)
    action `sync` create_image(leds: String) returns(img: ♻ micro\u003abit → Image)
    action `sync` brightness() returns(brightness: Number)
    action `sync` set_brightness(value: Number)
    action `async` show_animation(leds: String, interval: Number)
    action `sync` running_time() returns(now: Number)
    action `async` show_number(value: Number, interval: Number)
    action `sync` set_pixel(@this: ♻ micro\u003abit → Image, x: Number, y: Number, value: Boolean)
    action `sync` pixel(@this: ♻ micro\u003abit → Image, x: Number, y: Number) returns(state: Boolean)
    action `sync` clear(img: ♻ micro\u003abit → Image)
    action `sync` in_background(body: Action)
    action `async` calibrate()
    action `sync` forever(body: Action)
    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)
    action `sync` on_pin_pressed(name: String, body: Action)
    action `sync` remote_control(@event: String)
    action `sync` camera(@event: String)
    action `sync` audio_recorder(@event: String)
    action `sync` alert(@event: String)
    action `sync` notify_event_registration(evid: String)
    action `sync` add_button(text: String, @action: Action)
    action `sync` reset()
    action `sync` warning(message: String)
    action `sync` analog_set_period(pin: String, micros: Number)
    action `sync` analog_set_pitch_pin(name: String)
    action `async` analog_pitch(frequency: Number, ms: Number)
    action `async` plot_frame(@this: ♻ micro\u003abit → Image, index: Number)
    action `async` show_leds(leds: String, ms: Number)
    action `async` play_note(frequency: Number, ms: Number)
    action `sync` note(name: String) returns(frequency: Number)
    action `sync` plot_leds(leds: String)
    action `sync` plot_image(@this: ♻ micro\u003abit → Image, x_offset: Number)
    action `sync` temperature() returns(temp: Number)
    action `sync` stop_animation()
    action `async` show_frame(img: ♻ micro\u003abit → Image, frame: Number)
  }
}
#La2qRKrLbx4LxKmX
var heart : ♻ micro\u003abit → Image {
  transient = true;
}
#x4334a31V1ZL6vj2
action main() {
  #BmrvZRXOS4UrAj3l // {topic:td/lessons/flashing-heart/tutorial}
  #xNXZYjYB26M2UR9a // {template:empty}
  #xCHA3gKFfilgUMTF // {templatename:ADJ script}
  #DPm4qTiKKiAoe50f // {widgets:}
  #wUr6BCeteY5gewoV // {box:avatar:boothing}
  #xVT2NZpWJlOxhD2j // {videoptr:td/videos/flashing-heart-0}
  #xP342IFDvLzjwRal // Welcome! This tutorial will teach how to control images with variables. Let's get started!
  #xgIGusXyGCBXRcP4 // {/box}
}
#xEYX48iEHbsTFSwp
var imageEditor : Picture {
  is\_resource = true;
  url = "https://microbit0.blob.core.windows.net/pub/twiswpxf";
  transient = true;
}
#xofTBUKer21CfPXD
var boothing : Picture {
  is\_resource = true;
  url = "https://microbit0.blob.core.windows.net/pub/vflboela";
  transient = true;
}
#Aftcl64H2g55Hyhu
var avatar : Picture {
  is\_resource = true;
  url = "https://microbit0.blob.core.windows.net/pub/lqakekjj";
  transient = true;
}
