meta version "v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex";
meta name "micro:bit radio";
meta rootId "bPuS7DtaWtd6vZXa7KRir8jc";
meta isLibrary "yes";
meta hasIds "yes";
meta platform "current";
meta parentIds "";
// Communicate between microbit using #radio
#QvbjvjsV1htKET97
action example() {
  #v1EfIO7q4CD34JbS // A library to enable simple, point to multipoint communication directly between micro:bits
  #dgz4CYMFi1GJrlWb // {box:card:Important Security Considerations}
  #V1Q2Mt2X0y1MpaJc // This API does not contain any form of encryption, authentication or authorization. It's purpose is solely for use as a teaching aid to demonstrate how simple communications operates, and to provide a sandpit through which learning can take place.
  #m1sK1JPyW7OdqpkN // For serious applications, BLE should be considered a substantially more secure alternative.
  #xVdYhDEaPUYCZuzv // {/box}
  #vD5khAE2vvxNLdNC // [read more...](/functions/radio-library).
  meta private;
}
#UWc0jewBCyZ0aHsL meta import micro\u003abit {
  pub "xsurev"
  usage {
    type Image
    action `sync` \_libinit()
    action `async` pause(ms: Number)
    action `sync` clear_screen()
    action `sync` width(@this: ♻ micro\u003abit → Image) returns(w: Number)
    action `async` scroll_image(@this: ♻ micro\u003abit → Image, x_offset_per_step: Number, interval: Number)
    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)
    action `sync` plot(x: Number, y: Number)
    action `sync` point(x: Number, y: Number) returns(on: Boolean)
    action `async` show_string(text: String, interval: Number)
    action `sync` unplot(x: Number, y: Number)
    action `sync` on_button_pressed(name: String, body: Action)
    action `async` show_image(@this: ♻ micro\u003abit → Image, x_offset: Number)
    action `sync` compass_heading() returns(degrees: Number)
    action `sync` acceleration(dimension: String) returns(millig: Number)
    action `sync` digital_write_pin(name: String, value: Number)
    action `sync` digital_read_pin(name: String) returns(value: Number)
    action `sync` analog_read_pin(name: String) returns(value: Number)
    action `sync` analog_write_pin(name: String, value: Number)
    action `sync` create_image(leds: String) returns(img: ♻ micro\u003abit → Image)
    action `sync` brightness() returns(brightness: Number)
    action `sync` set_brightness(value: Number)
    action `async` show_animation(leds: String, interval: Number)
    action `sync` running_time() returns(now: Number)
    action `async` show_number(value: Number, interval: Number)
    action `sync` set_pixel(@this: ♻ micro\u003abit → Image, x: Number, y: Number, value: Boolean)
    action `sync` pixel(@this: ♻ micro\u003abit → Image, x: Number, y: Number) returns(state: Boolean)
    action `sync` clear(img: ♻ micro\u003abit → Image)
    action `sync` in_background(body: Action)
    action `async` calibrate()
    action `sync` forever(body: Action)
    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)
    action `sync` on_pin_pressed(name: String, body: Action)
    action `sync` tell_camera_to(@event: String)
    action `sync` raise_alert_to(@event: String)
    action `async` on_notified(@event: String, body: Action)
    action `sync` notify_event_registration(evid: String)
    action `sync` add_button(text: String, @action: Action)
    action `sync` reset()
    action `sync` warning(message: String)
    action `sync` analog_set_period(pin: String, micros: Number)
    action `sync` analog_set_pitch_pin(name: String)
    action `async` analog_pitch(frequency: Number, ms: Number)
    action `async` plot_frame(@this: ♻ micro\u003abit → Image, index: Number)
    action `async` show_leds(leds: String, ms: Number)
    action `async` play_tone(frequency: Number, ms: Number)
    action `sync` note_frequency(name: String) returns(frequency: Number)
    action `sync` plot_leds(leds: String)
    action `sync` plot_image(@this: ♻ micro\u003abit → Image, x_offset: Number)
    action `sync` temperature() returns(temp: Number)
    action `sync` stop_animation()
    action `async` show_frame(img: ♻ micro\u003abit → Image, frame: Number)
    action `sync` queue_event(body: Action, name: String)
    action `async` ring_tone(frequency: Number)
    action `sync` tell_remote_control_to(@event: String)
    action `sync` map(value: Number, from_low: Number, from_high: Number, to_low: Number, to_high: Number) returns(r: Number)
    action `sync` magnetic_force(dimension: String) returns(millig: Number)
    action `sync` servo_write_pin(name: String, value: Number)
    action `sync` servo_set_pulse(pin: String, micros: Number)
    action `async` rest(ms: Number)
    action `async` rotation(kind: String) returns(angle: Number)
    action `sync` note(name: String) returns(frequency: Number)
    action `sync` set_pixel_brightness(@this: ♻ micro\u003abit → Image, x: Number, y: Number, value: Number)
    action `sync` pixel_brightness(@this: ♻ micro\u003abit → Image, x: Number, y: Number) returns(state: Number)
    action `sync` set_display_mode(mode: String)
    action `async` play_note(frequency: Number, ms: Number)
    action `sync` light_level() returns(light: Number)
  }
}
#EONeQiUgK4Dyu1NP
action broadcast(#eq984CqHIkP4OJdH message: Number) {
  #b49VkB7P43iuVbZW // Sends a message id to other micro:bit in the group using radio.
  #bCG252KuacSf4L7y // {namespace:radio}
  #DD3E9MVbQTp4j1Gk // {weight:80}
  #XvyNCzSx67zF66bF // {help:/functions/broadcast-message}
  #xW9iSSsgBwIdFRB6 // {shim:micro_bit::broadcastMessage}
  meta sync;
}
#IJpYYCZw1F44TQZX
action on_received(#D5GQ19JFw0Y0Q2gx message: Number, #BxhfICatrNOOO7VO body: Action) {
  #FbP46LCQxLtiy2cg // Registers code to run when a particular message is received from another micro:bit.
  #enk4CdkcCaJtTNyG // {namespace:radio}
  #yKwnAAs6C14iUQLT // {weight:79}
  #zDFWR0D2okETrRiW // {help:/functions/on-received}
  #xU6Dl4D5gfvuwNnV // {shim:micro_bit::onBroadcastMessageReceived}
}
#YX3T4fGx4ZOV2ZPC
action set_group(#JLhxZUfc4PKew5BJ id: Number) {
  #vqMamQcSdV7PIfwa // Sets the group id for radio communications. A micro:bit can only listen to one group ID at any time.
  #xFzuftNMadrf7h2u // {namespace:radio}
  #TMnfWrjAXTx93qYi // {weight:10}
  #b21F8HHSSNVMAeMM // {help:/functions/set-group}
  #XvR4P2cRp3umvyJP // {shim:micro_bit::setGroup}
  meta sync;
}
#MG4magNAAo55UTHZ
var glue\u002ejson : String {
  is\_resource = true;
  url = "data:text/plain;base64,ewogICAgImNvbmZpZyI6IHsKICAgICAgICAiTUlDUk9CSVRfQkxFX0VOQUJMRUQiOiAiMCIKICAgIH0KfQ==";
  transient = true;
}
