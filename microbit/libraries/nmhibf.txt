meta version "v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex";
meta name "ADJ script";
meta rootId "om6XYqUcsjDK0npYjNyzn3BW";
meta hasIds "yes";
meta splitScreen "yes";
meta platform "current";
meta parentIds "";
#sCBCojzbqNfj6sRA
action main() {
  #xP1meKgKx2EeA03s skip;
}
#SVXVucr3dRK4J6Y7 meta import micro\u003abit {
  pub "hdkwlu"
  usage {
    type Image
    action `sync` \_libinit()
    action `async` pause(ms: Number)
    action `sync` clear_screen()
    action `sync` width(@this: ♻ micro\u003abit → Image) returns(w: Number)
    action `async` scroll_image(@this: ♻ micro\u003abit → Image, x_offset_per_step: Number, interval: Number)
    action `sync` button_is_pressed(name: String) returns(pressed: Boolean)
    action `sync` plot(x: Number, y: Number)
    action `sync` point(x: Number, y: Number) returns(on: Boolean)
    action `async` show_string(text: String, interval: Number)
    action `sync` unplot(x: Number, y: Number)
    action `sync` on_button_pressed(name: String, body: Action)
    action `async` show_image(@this: ♻ micro\u003abit → Image, x_offset: Number)
    action `sync` compass_heading() returns(degrees: Number)
    action `sync` acceleration(dimension: String) returns(millig: Number)
    action `sync` digital_write_pin(name: String, value: Number)
    action `sync` digital_read_pin(name: String) returns(value: Number)
    action `sync` analog_read_pin(name: String) returns(value: Number)
    action `sync` analog_write_pin(name: String, value: Number)
    action `sync` create_image(leds: String) returns(img: ♻ micro\u003abit → Image)
    action `sync` brightness() returns(brightness: Number)
    action `sync` set_brightness(value: Number)
    action `async` show_animation(leds: String, interval: Number)
    action `sync` running_time() returns(now: Number)
    action `async` show_number(value: Number, interval: Number)
    action `sync` set_pixel(@this: ♻ micro\u003abit → Image, x: Number, y: Number, value: Boolean)
    action `sync` pixel(@this: ♻ micro\u003abit → Image, x: Number, y: Number) returns(state: Boolean)
    action `sync` clear(img: ♻ micro\u003abit → Image)
    action `sync` in_background(body: Action)
    action `async` calibrate()
    action `sync` forever(body: Action)
    action `sync` pin_is_pressed(name: String) returns(pressed: Boolean)
    action `sync` on_pin_pressed(name: String, body: Action)
    action `sync` remote_control(@event: String)
    action `sync` camera(@event: String)
    action `sync` microphone(@event: String)
    action `sync` alert(@event: String)
    action `sync` notify_event_registration(evid: String)
    action `sync` add_button(text: String, @action: Action)
    action `sync` reset()
    action `sync` warning(message: String)
    action `sync` analog_set_period(pin: String, micros: Number)
    action `sync` analog_set_pitch_pin(name: String)
    action `async` analog_pitch(frequency: Number, ms: Number)
    action `async` plot_frame(@this: ♻ micro\u003abit → Image, index: Number)
    action `async` show_leds(leds: String, ms: Number)
    action `async` play_note(frequency: Number, ms: Number)
    action `sync` note(name: String) returns(frequency: Number)
    action `sync` plot_leds(leds: String)
    action `sync` plot_image(@this: ♻ micro\u003abit → Image, x_offset: Number)
    action `sync` temperature() returns(temp: Number)
    action `sync` stop_animation()
    action `async` show_frame(img: ♻ micro\u003abit → Image, frame: Number)
    action `sync` queue_event(body: Action, name: String)
    action `async` ring(frequency: Number)
  }
}
#Alu1GJCl0XiyaFNn meta import micro\u003abit_screen {
  pub "tulxtd"
  usage {
    action `sync` toggle(x: Number, y: Number)
    action `sync` plot_all()
    action `sync` toggle_all()
    action `async` fade_in(ms: Number)
    action `async` fade_out(ms: Number)
    action `sync` screenshot() returns(img: ♻ micro\u003abit → Image)
  }
  #Msmo63osSl8VOt4V resolve micro\u003abit = ♻ micro\u003abit with {
  }
}
#x2LHHGswL451jMCn meta import micro\u003abit_game {
  pub "ryudev"
  usage {
    action `sync` score() returns(score: Number)
    action `sync` set_score(value: Number)
    action `sync` life() returns(life: Number)
    action `async` set_life(value: Number)
    action `sync` add_score(points: Number)
    action `async` add_life(lives: Number)
    action `async` start_countdown(ms: Number)
    action `async` game_over()
    action `async` current_time() returns(ms: Number)
    action `async` remove_life(life: Number)
    action `async` level_up()
    action `async` level() returns(lv: Number)
    action `async` start_stopwatch()
    action `sync` is_running() returns(running: Boolean)
    action `async` show_score()
  }
  #uTSBhGGRoLDgCI2N resolve micro\u003abit = ♻ micro\u003abit with {
  }
}
#xk593tAL91e8H2C4 meta import micro\u003abit_senses {
  pub "jztbbx"
  usage {
    action `sync` on_screen_up(body: Action)
    action `sync` on_screen_down(body: Action)
    action `sync` on_shake(body: Action)
    action `sync` on_logo_up(body: Action)
    action `sync` on_logo_down(body: Action)
  }
  #BbNcU7atbNNbBQmr resolve micro\u003abit = ♻ micro\u003abit with {
  }
}
#F7U0eegUWemWOHIj meta import micro\u003abit_sprites {
  pub "vzkdcc"
  usage {
    type Led_Sprite
    action `async` create_sprite(x: Number, y: Number) returns(r: ♻ micro\u003abit_sprites → Led_Sprite)
    action `sync` move(@this: ♻ micro\u003abit_sprites → Led_Sprite, leds: Number)
    action `sync` go_to(@this: ♻ micro\u003abit_sprites → Led_Sprite, x: Number, y: Number)
    action `sync` if_on_edge\u002c_bounce(@this: ♻ micro\u003abit_sprites → Led_Sprite)
    action `sync` turn_right(@this: ♻ micro\u003abit_sprites → Led_Sprite, degrees: Number)
    action `sync` turn_left(@this: ♻ micro\u003abit_sprites → Led_Sprite, degrees: Number)
    action `sync` point_in_direction(@this: ♻ micro\u003abit_sprites → Led_Sprite, degrees: Number)
    action `sync` x_position(@this: ♻ micro\u003abit_sprites → Led_Sprite) returns(r: Number)
    action `sync` y_position(@this: ♻ micro\u003abit_sprites → Led_Sprite) returns(r: Number)
    action `sync` direction(@this: ♻ micro\u003abit_sprites → Led_Sprite) returns(r: Number)
    action `sync` set_x_to(@this: ♻ micro\u003abit_sprites → Led_Sprite, x: Number)
    action `sync` set_y_to(@this: ♻ micro\u003abit_sprites → Led_Sprite, y: Number)
    action `sync` change_y_by(@this: ♻ micro\u003abit_sprites → Led_Sprite, y: Number)
    action `sync` change_x_by(@this: ♻ micro\u003abit_sprites → Led_Sprite, x: Number)
    action `sync` touching_\u003f(@this: ♻ micro\u003abit_sprites → Led_Sprite, other: ♻ micro\u003abit_sprites → Led_Sprite) returns(r: Boolean)
    action `sync` touching_edge\u003f(@this: ♻ micro\u003abit_sprites → Led_Sprite) returns(r: Boolean)
    action `sync` on(@this: ♻ micro\u003abit_sprites → Led_Sprite)
    action `sync` off(@this: ♻ micro\u003abit_sprites → Led_Sprite)
  }
  #yf5JlXsz20jG8d7Y resolve micro\u003abit = ♻ micro\u003abit with {
  }
}
